Var interface:
   serializer
   set( V )( Tx )
   get( Tx ) : V

-- storage --
type M = Map[ Acc, Array[ Byte ]]
type Storage = Map[ Int, M ]

::::::::::::::::::

- let's forget about the caching first, it can always be added later transparently
- but: we might need to cache the current txn's writes, as the path can only be
  constructed right before the commit.
- could do the latter as a 'global' map in system, saves space, and also is easier
  as one TxnLocal with one particular before-commit hook

::::::::::::::::::

writeCache

  Map Int<id> -> Long<pathSum+partialHashes> -> Octree
                                             -> Int<leaf> -> Value
::::::::::::::::::

ft = Ancestor.newTree[ S, Version ]( rootVersion )
mp = Ancestor.newMap[ S, Version, V ]( ft, rootValue )

tree supports

insertChild( parentVersion, childVersion ) : childVertex

-- how do we use this for the txnLocal cache?
-- it would be logical to construct the ConfluentMemoryMap with the persistent map
   as 'fallback' argument.

::::::::::::::::::

Brilliant (???) idea: there is no reason why we cannot have a impl.InMemory which uses TxnLocal's instead of Refs ! That is to say, we can have our Ancestor tree and map based on TxnLocals instead for the ConfluentMemoryMap

::::::::::::::::::

assume we are in version (in the following only compressed paths are used!) 

v_before = <v0, v0>
we issue a transaction which will result either in 
v_after = <v0, v1>
or
v_after = <v0, v0, v1, v1>  (correct ??)

a `get` call will do the following:
assume that the accessed node has access path of v_before -- right?

- we simply need a Map[ Int<id>, Map[ Long<hash>, V ]] for the cached values,
where the hash is the sum of v_before
- then we look up that map. if there is no value stored, we fall back to the persisted confluent map

to facilitate flush at the end of the txn, the map might to look a bit enhanced:

Map[ Int<id>, Map[ Long<hash>, Write[ V ]]

where Write[ V ] = (V, S#Acc, TxnSerializer[ S#Tx, S#Acc, V ])

the flushing then just becomes iterating over the map entries, and executing the write method on the serializer, adding the final suffix to the path

::::::::::::::::::

<v0, v0>

full tree

mark tree

- we have the compressed index and path
- we know how to perform prefix search on its randomised version
- assume that for space efficiency we distiguish between a
  field which has only one assignment, and one which has >1
- the hash map thus points to something like

    Entry = SingleEntry | MarkTree

:::::: tx.newVar ::::::

   res = new VarImpl( id = newID(), path = empty )
   res.setInit( init )
      --> system.put( id, path = empty, init )
         --> cache.put ...

         ...
   res

-> txn flush

  mittels Hashing.foreachPrefix werden die partial prefixes geschrieben (EntryPre( preSum ))

:::::: vr.get ::::::

dbGetAndResolve
  (mod1, map1, pre1) = dbMaxPrefix( key, map, dbView )
  pre1Sz  = pre1.size
  pre1Sum = pre1.sum
  if( pre1Sz == 0 ) return None
  (mod2, map2, res1) = dbGetRefresh( pre1Sum, map1, dbView )
  res1 match { 
    case SearchNoKey =>
      if( pre1Sz == 1 ) None
      else {
        pre2Sz  = pre1Sz - 1
        pre2Sum = pre1.init.sum
        (mod3, map3, res2) = dbGetRefresh( pre2Sum, map2, dbView )
        res2.valueOption
    case s => s.valueOption
  }

dbMaxPrefix( key, mmap)
   m = bitCount( path.size )
   succ = 0
   allFound = true
   ij      = 0
   ijm     = 0
   i = 1 to m
      pre  = succ
      succ = Hashing.prefix( sz, i, m )
      (onlyOnDisk, map2, found) = dbContainsRefresh( key.take( succ ).sum, mmap
      if( !found ) {
        allFound = false
        ij = succ
        ijm = pre
      }
    }

   if( allFound ) return (mapWasModified?, mmap, key)

   ...
   ...
   key.take( ijm + d )

dbGetRefresh( key: Long )
   map.get( key ) match {
      case Some( vp @ ValuePre( fullKey ) )  => dbGetRefresh( fullKey, map, dbView ) // retry with full key
      case Some( vn @ ValueNone ) => SearchNoValue
      case Some( vf: SoftValueFull[ _ ]) => harden(); SearchValue( ... )
      case None => // same procedure with underlying store

      
NOTE: SearchNoValue is probably wrong and should be removed (as it was only associated with Path.empty which would alias to hash 0L for any path?)

::::::::::::::::::

hence, instead of ValueFull we have SingleEntry | MarkTree

...