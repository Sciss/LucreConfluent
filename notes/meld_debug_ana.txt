:::::::: 0 ::::::::
0 = access

:::::::: 1 ::::::::

cell_a1: 1 (int 2, next 3) -> cell_2
cell_b2: 4 (int 5, next 6) -> cell_3
cell_c3: 7 (int 8, next 9)
cell_d4: 10 (int 11 next 12) -> cell_5
cell_e5: 13 (int 14 next 15) -> cell_6
cell_f6: 16 (int 17 next 18)

// [ a b c ], [ d e f ]
iterate(i1 = 0, j1 = 1, split1 = 1, i2 = 0, j2 = 1, split2 = 2)

:::::::: 2 ::::::::

crossover(i1, j1, split1)

fork from <0,1>

a -> e (<1,1>) for < 3 @ 1,2>
d -> b (<1,1>) for <12 @ 1,2>

:::::::: 3 ::::::::

crossover(i2, j2, split2)

fork from <0,1>

b -> f (<1,1>) for < 3 @ 1,3>
e -> c (<1,1>) for <12 @ 1,3>

:::::::: 4 ::::::::

meld - new tree 4

toList ok

// [ a e f ], [ d b c ], [ a b f ], [ d e c ]
iterate(i1 = 2, j1 = 0, split1 = 1, i2 = 2, j2 = 0, split2 = 1)

::::::::::::::::::::::::::::::::::::::::::::: iter2

:::::::: 5 ::::::::

crossover(i1, j1, split1)

fork from <0,1,4,4>

:::::::: 6 ::::::::

crossover(i2, j2, split2)

fork from <0,1,4,4>

:::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::
Var<3> : Path(1, 3, 4); m = 2
isPre = { 10b, 11b }
---> Path(1, 3) NOT CONTAINED --- why?

txn flush write Some(Node(e, <13 @ 1,2,4,4>)<13 @ 1,2,4,4>) for <3 @ 1,3,4,5>
- hash = 0xF8B47FDA (=<1, 3>) - not contained
  putPartials (<1, 3, 4>)
  = <0xbb20b460 - 1>
  = <0x3d93cb7a - 3>
  = <0x9b3970be - 4>

  write sum(<1, 3>): 0 (empty), <1>

  putFullMap
     ---- could it be that the prevValue is invalid because it
     ---- actually needs re-serialization??
     ---- denn nun ist das problem in der tat dass
           get' <3 @ 1,3,4,4> den tree-root findet
           (finden muss! denn der index <1,3,4> wird ja jetzt
            gefunden, nicht mehr nur <1>)
     prevValue = (0, 4, 'b', 5, 6) --- i.e. path-size = 0!
     prevTerm  = 4

that means: we have to find out why we used Array[Byte] at this stage
(DurableConfluentMapImpl), and not a serializer for the original type.
two possibilities:
- it is not possible to keep the serializer until here --> we're doomed
- it was just a convenience (saving the pointer for the serializer)
   --> we can revert

CacheMapImpl:160

This cryptic message:

    * The serializer given is _non_transactional. This is because this trait bridges confluent
    * and ephemeral world (it may use a durable backend, but the data structures used for
    * storing the confluent graph are themselves ephemeral). If the value `A` requires a
    * transactional serialization, the current approach is to pre-serialize the value into
    * an appropriate format (e.g. a byte array) before calling into `put`. In that case
    * the wrapping structure must be de-serialized after calling `get`.

So why exactly can't we use the transaction? 
- Is it invalid at this point?
- Will there be a conflict in BDB?



