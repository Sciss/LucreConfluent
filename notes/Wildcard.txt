----------------------------v0
[20 Mar 2012, 18:22'36.289] Confluent - ::::::: root :::::::
[20 Mar 2012, 18:22'36.324] Confluent - txn newID <2 @ 0,0>			= w0
[20 Mar 2012, 18:22'36.327] Confluent - txn newVar Var[Int](<3 @ 0,0>)
[20 Mar 2012, 18:22'36.327] Confluent - Var[Int](<3 @ 0,0>) ini 2
[20 Mar 2012, 18:22'36.328] Confluent - ....... txn dirty .......
[20 Mar 2012, 18:22'36.330] Confluent - txn newVar Var(<4 @ 0,0>)
[20 Mar 2012, 18:22'36.330] Confluent - Var(<4 @ 0,0>) ini None
[20 Mar 2012, 18:22'36.332] Confluent - txn newID <5 @ 0,0>			= w1
[20 Mar 2012, 18:22'36.332] Confluent - txn newVar Var[Int](<6 @ 0,0>)
[20 Mar 2012, 18:22'36.332] Confluent - Var[Int](<6 @ 0,0>) ini 1
[20 Mar 2012, 18:22'36.332] Confluent - txn newVar Var(<7 @ 0,0>)
[20 Mar 2012, 18:22'36.332] Confluent - Var(<7 @ 0,0>) ini None
[20 Mar 2012, 18:22'36.336] Confluent - Var(<4 @ 0,0>) set Some(Node(w1, <5 @ 0,0>))
[20 Mar 2012, 18:22'36.338] Confluent - Access set Some(Node(w0, <2 @ 0,0>))
[20 Mar 2012, 18:22'36.338] Confluent - txn new tree 0
[20 Mar 2012, 18:22'36.355] Confluent - txn durable
[20 Mar 2012, 18:22'36.396] Confluent - ::::::: txn flush - term = 0 :::::::
[20 Mar 2012, 18:22'36.398] Confluent - txn flush write [B@319c0bd6 for <1 @ 0, 0>
[20 Mar 2012, 18:22'36.404] Confluent - txn flush write 2 for <3 @ 0, 0>
[20 Mar 2012, 18:22'36.404] Confluent - txn flush write [B@2918958e for <4 @ 0, 0>
[20 Mar 2012, 18:22'36.404] Confluent - txn flush write 1 for <6 @ 0, 0>
[20 Mar 2012, 18:22'36.405] Confluent - txn flush write [B@d02b2b6 for <7 @ 0, 0>
list after writing v0:
[20 Mar 2012, 18:22'36.408] Confluent - ::::::: atomic - input access = Path(0, 0) :::::::
[20 Mar 2012, 18:22'36.409] Confluent - Access get
[20 Mar 2012, 18:22'36.409] Confluent - txn get' <1 @ 0,0>
[20 Mar 2012, 18:22'36.417] Confluent - txn readID <2 @ 0,0>
[20 Mar 2012, 18:22'36.418] Confluent - txn read Var[Int](<3 @ 0,0>)
[20 Mar 2012, 18:22'36.418] Confluent - txn read Var(<4 @ 0,0>)
[20 Mar 2012, 18:22'36.418] Confluent - Var[Int](<3 @ 0,0>) get
[20 Mar 2012, 18:22'36.418] Confluent - txn get <3 @ 0,0>
[20 Mar 2012, 18:22'36.421] Confluent - Var(<4 @ 0,0>) get
[20 Mar 2012, 18:22'36.421] Confluent - txn get' <4 @ 0,0>
[20 Mar 2012, 18:22'36.421] Confluent - txn readID <5 @ 0,0>
[20 Mar 2012, 18:22'36.422] Confluent - txn read Var[Int](<6 @ 0,0>)
[20 Mar 2012, 18:22'36.422] Confluent - txn read Var(<7 @ 0,0>)
[20 Mar 2012, 18:22'36.422] Confluent - Var[Int](<6 @ 0,0>) get
[20 Mar 2012, 18:22'36.422] Confluent - txn get <6 @ 0,0>
[20 Mar 2012, 18:22'36.422] Confluent - Var(<7 @ 0,0>) get
[20 Mar 2012, 18:22'36.422] Confluent - txn get' <7 @ 0,0>
@ Path(0, 0) -> List((w0,2), (w1,1))

----------------------------v1
[20 Mar 2012, 18:22'36.423] Confluent - ::::::: atomic - input access = Path(0, 0) ++ <*> :::::::
[20 Mar 2012, 18:22'36.424] Confluent - Access get
[20 Mar 2012, 18:22'36.424] Confluent - txn get' <1 @ 0,0> ++ <*>
[20 Mar 2012, 18:22'36.424] Confluent - txn readID <2 @ 0,0> ++ <*>			= w0
[20 Mar 2012, 18:22'36.424] Confluent - txn read Var[Int](<3 @ 0,0> ++ <*>)
[20 Mar 2012, 18:22'36.424] Confluent - txn read Var(<4 @ 0,0> ++ <*>)
[20 Mar 2012, 18:22'36.425] Confluent - Var(<4 @ 0,0> ++ <*>) get
[20 Mar 2012, 18:22'36.425] Confluent - txn get' <4 @ 0,0> ++ <*>
[20 Mar 2012, 18:22'36.425] Confluent - txn readID <5 @ 0,0> ++ <*>
[20 Mar 2012, 18:22'36.425] Confluent - txn read Var[Int](<6 @ 0,0> ++ <*>)
[20 Mar 2012, 18:22'36.425] Confluent - txn read Var(<7 @ 0,0> ++ <*>)
[20 Mar 2012, 18:22'36.425] Confluent - Var(<7 @ 0,0> ++ <*>) get
[20 Mar 2012, 18:22'36.426] Confluent - txn get' <7 @ 0,0> ++ <*>
[20 Mar 2012, 18:22'36.426] Confluent - Var(<7 @ 0,0> ++ <*>) set Some(Node(w0, <2 @ 0,0> ++ <*>))
[20 Mar 2012, 18:22'36.426] Confluent - ....... txn dirty .......
[20 Mar 2012, 18:22'36.426] Confluent - Var(<4 @ 0,0> ++ <*>) set None
[20 Mar 2012, 18:22'36.427] Confluent - Access set Some(Node(w1, <5 @ 0,0> ++ <*>))
[20 Mar 2012, 18:22'36.428] Confluent - txn durable
[20 Mar 2012, 18:22'36.443] Confluent - ::::::: txn flush - term = 1 :::::::
[20 Mar 2012, 18:22'36.443] Confluent - txn flush write [B@3da1c42f for <1 @ 0, 1>	-> Some(Node(w1, <5 @ 0,N>))
[20 Mar 2012, 18:22'36.570] Confluent - txn flush write [B@20d9896e for <4 @ 0, 1>	-> None
[20 Mar 2012, 18:22'36.595] Confluent - txn flush write [B@7c33788d for <7 @ 0, 1>	-> Some(Node(w0, <2 @ 0,N>))
list after writing v1:
[20 Mar 2012, 18:22'36.624] Confluent - ::::::: atomic - input access = Path(0, 1) :::::::
[20 Mar 2012, 18:22'36.624] Confluent - Access get
[20 Mar 2012, 18:22'36.624] Confluent - txn get' <1 @ 0,1>
[20 Mar 2012, 18:22'36.625] Confluent - txn durable
[20 Mar 2012, 18:22'36.634] Confluent - txn readID <5 @ 0,1>
[20 Mar 2012, 18:22'36.634] Confluent - txn read Var[Int](<6 @ 0,1>)
[20 Mar 2012, 18:22'36.634] Confluent - txn read Var(<7 @ 0,1>)
[20 Mar 2012, 18:22'36.635] Confluent - Var[Int](<6 @ 0,1>) get
[20 Mar 2012, 18:22'36.635] Confluent - txn get <6 @ 0,1>
[20 Mar 2012, 18:22'36.635] Confluent - Var(<7 @ 0,1>) get
[20 Mar 2012, 18:22'36.635] Confluent - txn get' <7 @ 0,1>
[20 Mar 2012, 18:22'36.636] Confluent - txn readID <2 @ 0,1>
[20 Mar 2012, 18:22'36.636] Confluent - txn read Var[Int](<3 @ 0,1>)
[20 Mar 2012, 18:22'36.636] Confluent - txn read Var(<4 @ 0,1>)
[20 Mar 2012, 18:22'36.636] Confluent - Var[Int](<3 @ 0,1>) get
[20 Mar 2012, 18:22'36.637] Confluent - txn get <3 @ 0,1>
[20 Mar 2012, 18:22'36.637] Confluent - Var(<4 @ 0,1>) get
[20 Mar 2012, 18:22'36.637] Confluent - txn get' <4 @ 0,1>
@ Path(0, 1) -> List((w1,1), (w0,2))

(( [20 Mar 2012, 18:22'36.639] Confluent - ::::::: atomic - input access = Path(0, 1) ::::::: ))
----------------------------v2
[20 Mar 2012, 18:22'36.639] Confluent - ::::::: atomic - input access = Path(0, 0) :::::::
[20 Mar 2012, 18:22'36.640] Confluent - Access get
[20 Mar 2012, 18:22'36.640] Confluent - txn get' <1 @ 0,*>
[20 Mar 2012, 18:22'36.640] Confluent - txn durable
[20 Mar 2012, 18:22'36.641] Confluent - txn readID <2 @ 0,*>
[20 Mar 2012, 18:22'36.641] Confluent - txn read Var[Int](<3 @ 0,*>)
[20 Mar 2012, 18:22'36.642] Confluent - txn read Var(<4 @ 0,*>)
[20 Mar 2012, 18:22'36.642] Confluent - Var(<4 @ 0,*>) get
[20 Mar 2012, 18:22'36.642] Confluent - txn get' <4 @ 0,*>
[20 Mar 2012, 18:22'36.643] Confluent - txn readID <5 @ 0,*>
[20 Mar 2012, 18:22'36.643] Confluent - txn read Var[Int](<6 @ 0,*>)
[20 Mar 2012, 18:22'36.643] Confluent - txn read Var(<7 @ 0,*>)
[20 Mar 2012, 18:22'36.643] Confluent - Var(<4 @ 0,*>) get
[20 Mar 2012, 18:22'36.643] Confluent - txn get' <4 @ 0,*>
[20 Mar 2012, 18:22'36.644] Confluent - txn readID <5 @ 0,*>
[20 Mar 2012, 18:22'36.645] Confluent - txn read Var[Int](<6 @ 0,*>)
[20 Mar 2012, 18:22'36.645] Confluent - txn read Var(<7 @ 0,*>)
[20 Mar 2012, 18:22'36.645] Confluent - Var(<7 @ 0,*>) get
[20 Mar 2012, 18:22'36.645] Confluent - txn get' <7 @ 0,*>
[20 Mar 2012, 18:22'36.646] Confluent - txn newID <8 @ ?,?>
[20 Mar 2012, 18:22'36.647] Confluent - txn newVar Var[Int](<9 @ ?,?>)
[20 Mar 2012, 18:22'36.647] Confluent - Var[Int](<9 @ ?,?>) ini 3
[20 Mar 2012, 18:22'36.647] Confluent - ....... txn dirty .......
[20 Mar 2012, 18:22'36.647] Confluent - txn newVar Var(<10 @ ?,?>)
[20 Mar 2012, 18:22'36.647] Confluent - Var(<10 @ ?,?>) ini None
[20 Mar 2012, 18:22'36.647] Confluent - Var(<7 @ 0,*>) set Some(Node(w2, <8 @ ?,?>))
[20 Mar 2012, 18:22'36.647] Confluent - Access set Some(Node(w1, <5 @ 0,*>))
[20 Mar 2012, 18:22'36.654] Confluent - ::::::: txn flush - term = 2 :::::::
[20 Mar 2012, 18:22'36.654] Confluent - txn flush write [B@382f8116 for <1 @ 0, 2>	-> Some(Node(w1, <5 @ 0,*>))
[20 Mar 2012, 18:22'36.674] Confluent - txn flush write [B@4c2b349d for <7 @ 0, 2>	-> Some(Node(w2, <8 @ ?,?>))
[20 Mar 2012, 18:22'36.691] Confluent - txn flush write 3 for <9 @ 0, 2>
                                                      CORRECT <9 @ 2, 2>
[20 Mar 2012, 18:22'36.692] Confluent - txn flush write [B@288b567c for <10 @ 0, 2>	-> None
                                                                CORRECT <10 @ 2, 2>
list after writing v2:
[20 Mar 2012, 18:22'36.695] Confluent - ::::::: atomic - input access = Path(0, 2) :::::::
[20 Mar 2012, 18:22'36.695] Confluent - Access get
[20 Mar 2012, 18:22'36.695] Confluent - txn get' <1 @ 0,2>
[20 Mar 2012, 18:22'36.696] Confluent - txn durable
[20 Mar 2012, 18:22'36.697] Confluent - txn readID <5 @ 0,2>
[20 Mar 2012, 18:22'36.697] Confluent - txn read Var[Int](<6 @ 0,2>)
[20 Mar 2012, 18:22'36.697] Confluent - txn read Var(<7 @ 0,2>)
[20 Mar 2012, 18:22'36.697] Confluent - Var[Int](<6 @ 0,2>) get
[20 Mar 2012, 18:22'36.697] Confluent - txn get <6 @ 0,2>
[20 Mar 2012, 18:22'36.698] Confluent - Var(<7 @ 0,2>) get
[20 Mar 2012, 18:22'36.698] Confluent - txn get' <7 @ 0,2>
[20 Mar 2012, 18:22'36.700] Confluent - txn readID <8 @ 0,2>
                                           CORRECT <8 @ 2,2>
[20 Mar 2012, 18:22'36.700] Confluent - txn read Var[Int](<9 @ 0,2>)
                                                  CORRECT <9 @ 2,2>
[20 Mar 2012, 18:22'36.700] Confluent - txn read Var(<10 @ 0,2>)
                                             CORRECT <10 @ 2,2>
[20 Mar 2012, 18:22'36.700] Confluent - Var[Int](<9 @ 0,2>) get
                                         CORRECT <9 @ 2,2>
[20 Mar 2012, 18:22'36.700] Confluent - txn get <9 @ 0,2>
                                        CORRECT <9 @ 2,2>
[20 Mar 2012, 18:22'36.701] Confluent - Var(<10 @ 0,2>) get
                                    CORRECT <10 @ 2,2>
[20 Mar 2012, 18:22'36.701] Confluent - txn get' <10 @ 0,2>
                                         CORRECT <10 @ 2,2>
@ Path(0, 2) -> List((w1,1), (w2,3))


idea:
   persistent.put( id, path, value )( this, writer )
-> persistent.put( id, path, value, isMeld )( this, writer )
// that is, iin persistent.get we will be able to retrieve the * ?

then Path write would only write the index, and newID would produce an empty path instead of <inputAccess.indexTerm, inputAccess.indexTerm>,
and be written also as empty path.

:::::::::::::::::::::::::::::::::::::::
let's simulate that for the rest of the versions

[20 Mar 2012, 18:22'36.702] Confluent - ::::::: atomic - input access = Path(0, 2) :::::::
----------------------------v3
[20 Mar 2012, 18:22'36.703] Confluent - ::::::: atomic - input access = Path(0, 1) :::::::
[20 Mar 2012, 18:22'36.703] Confluent - Access meld Path(0, 2)
[20 Mar 2012, 18:22'36.703] Confluent - txn get' <1 @ 0,2>
[20 Mar 2012, 18:22'36.703] Confluent - txn durable
[20 Mar 2012, 18:22'36.712] Confluent - txn readID <5 @ 0,2> ++ <*>
[20 Mar 2012, 18:22'36.712] Confluent - txn read Var[Int](<6 @ 0,2> ++ <*>)
[20 Mar 2012, 18:22'36.712] Confluent - txn read Var(<7 @ 0,2> ++ <*>)
[20 Mar 2012, 18:22'36.714] Confluent - Var[Int](<6 @ 0,2> ++ <*>) get
[20 Mar 2012, 18:22'36.714] Confluent - txn get <6 @ 0,2> ++ <*>
[20 Mar 2012, 18:22'36.714] Confluent - Var[Int](<6 @ 0,2> ++ <*>) set 3
[20 Mar 2012, 18:22'36.714] Confluent - ....... txn dirty .......
[20 Mar 2012, 18:22'36.715] Confluent - Var(<7 @ 0,2> ++ <*>) get
[20 Mar 2012, 18:22'36.715] Confluent - txn get' <7 @ 0,2 ++ <*>>
[20 Mar 2012, 18:22'36.716] Confluent - txn readID <8 @ 2,2> ++ <*>
[20 Mar 2012, 18:22'36.716] Confluent - txn read Var[Int](<9 @ 2,2> ++ <*>)
[20 Mar 2012, 18:22'36.716] Confluent - txn read Var(<10 @ 2,2> ++ <*>)
[20 Mar 2012, 18:22'36.716] Confluent - Var[Int](<9 @ 2,2> ++ <*>) get
[20 Mar 2012, 18:22'36.716] Confluent - txn get <9 @ 2,2> ++ <*>
[20 Mar 2012, 18:22'36.717] Confluent - Var[Int](<9 @ 2,2> ++ <*>) set 5
[20 Mar 2012, 18:22'36.717] Confluent - Var(<10 @ 2,2> ++ <*>) get
[20 Mar 2012, 18:22'36.717] Confluent - txn get' <10 @ 2,2> ++ <*>
[20 Mar 2012, 18:22'36.717] Confluent - Access get
[20 Mar 2012, 18:22'36.717] Confluent - txn get' <1 @ 0,1> ++ <*>
[20 Mar 2012, 18:22'36.719] Confluent - txn readID <5 @ 0,1> ++ <*>
[20 Mar 2012, 18:22'36.719] Confluent - txn read Var[Int](<6 @ 0,1> ++ <*>)
[20 Mar 2012, 18:22'36.719] Confluent - txn read Var(<7 @ 0,1> ++ <*>)
[20 Mar 2012, 18:22'36.719] Confluent - Var(<7 @ 0,1> ++ <*>) get
[20 Mar 2012, 18:22'36.719] Confluent - txn get' <7 @ 0,1> ++ <*>
[20 Mar 2012, 18:22'36.721] Confluent - txn readID <2 @ 0,1 ++ <*>>
[20 Mar 2012, 18:22'36.721] Confluent - txn read Var[Int](<3 @ 0,1> ++ <*>)
[20 Mar 2012, 18:22'36.721] Confluent - txn read Var(<4 @ 0,1> ++ <*>)
[20 Mar 2012, 18:22'36.721] Confluent - Var(<4 @ 0,1> ++ <*>) get
[20 Mar 2012, 18:22'36.721] Confluent - txn get' <4 @ 0,1> ++ <*>
[20 Mar 2012, 18:22'36.722] Confluent - Var(<4 @ 0,1> ++ <*>) set Some(Node(w1, <5 @ 0,2> ++ <*>))
[20 Mar 2012, 18:22'36.723] Confluent - txn new tree 3
[20 Mar 2012, 18:22'36.728] Confluent - ::::::: txn flush - meld term = 3 :::::::
[20 Mar 2012, 18:22'36.732] Confluent - txn flush write [B@1fbb9696 for <4 @ 0, 1, 3, 3>	-> Some(Node(w1, <5 @ 0,2> ++ M))
[20 Mar 2012, 18:22'36.735] Confluent - txn flush write 3 for <6 @ 0, 2, 3, 3>
[20 Mar 2012, 18:22'36.736] Confluent - txn flush write 5 for <9 @ 2, 2, 3, 3>
list after writing v3:
[20 Mar 2012, 18:22'36.738] Confluent - ::::::: atomic - input access = Path(0, 1, 3, 3) :::::::
[20 Mar 2012, 18:22'36.738] Confluent - Access get
[20 Mar 2012, 18:22'36.738] Confluent - txn get' <1 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.739] Confluent - txn durable
[20 Mar 2012, 18:22'36.740] Confluent - txn readID <5 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.740] Confluent - txn read Var[Int](<6 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.740] Confluent - txn read Var(<7 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.740] Confluent - Var[Int](<6 @ 0,1,3,3>) get
[20 Mar 2012, 18:22'36.740] Confluent - txn get <6 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.740] Confluent - Var(<7 @ 0,1,3,3>) get
[20 Mar 2012, 18:22'36.740] Confluent - txn get' <7 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.742] Confluent - txn readID <2 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.742] Confluent - txn read Var[Int](<3 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.742] Confluent - txn read Var(<4 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.742] Confluent - Var[Int](<3 @ 0,1,3,3>) get
[20 Mar 2012, 18:22'36.742] Confluent - txn get <3 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.742] Confluent - Var(<4 @ 0,1,3,3>) get
[20 Mar 2012, 18:22'36.742] Confluent - txn get' <4 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.743] Confluent - txn readID <5 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.744] Confluent - txn read Var[Int](<6 @ 0,2,3,3>)
[20 Mar 2012, 18:22'36.744] Confluent - txn read Var(<7 @ 0,2,3,3>)
[20 Mar 2012, 18:22'36.744] Confluent - Var[Int](<6 @ 0,2,3,3>) get
[20 Mar 2012, 18:22'36.744] Confluent - txn get <6 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.744] Confluent - Var(<7 @ 0,2,3,3>) get
[20 Mar 2012, 18:22'36.744] Confluent - txn get' <7 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.746] Confluent - txn readID <8 @ 2,2,3,3>
[20 Mar 2012, 18:22'36.746] Confluent - txn read Var[Int](<9 @ 2,2,3,3>)
[20 Mar 2012, 18:22'36.746] Confluent - txn read Var(<10 @ 2,2,3,3>)
[20 Mar 2012, 18:22'36.746] Confluent - Var[Int](<9 @ 2,2,3,3>) get
[20 Mar 2012, 18:22'36.746] Confluent - txn get <9 @ 2,2,3,3>
[20 Mar 2012, 18:22'36.747] Confluent - Var(<10 @ 2,2,3,3>) get
[20 Mar 2012, 18:22'36.747] Confluent - txn get' <10 @ 2,2,3,3>
@ Path(0, 1, 3, 3) -> List((w1,1), (w0,2), (w1,3), (w2,5))

:::::::::::::::::::::::::::::::::::::::::::::::::::::::

----------------------------v4
WRITE

[20 Mar 2012, 18:22'36.748] Confluent - ::::::: atomic - input access = Path(0, 1, 3, 3) :::::::
[20 Mar 2012, 18:22'36.748] Confluent - Access meld Path(0, 2)
[20 Mar 2012, 18:22'36.748] Confluent - txn get' <1 @ 0,2>
[20 Mar 2012, 18:22'36.748] Confluent - txn durable
[20 Mar 2012, 18:22'36.750] Confluent - txn readID <5 @ 0,2>
[20 Mar 2012, 18:22'36.750] Confluent - txn read Var[Int](<6 @ 0,2>)
[20 Mar 2012, 18:22'36.750] Confluent - txn read Var(<7 @ 0,2>)
[20 Mar 2012, 18:22'36.750] Confluent - Access get
[20 Mar 2012, 18:22'36.750] Confluent - txn get' <1 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.752] Confluent - txn readID <5 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.752] Confluent - txn read Var[Int](<6 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.752] Confluent - txn read Var(<7 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.753] Confluent - Var(<7 @ 0,1,3,3>) get
[20 Mar 2012, 18:22'36.753] Confluent - txn get' <7 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.754] Confluent - txn readID <2 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.754] Confluent - txn read Var[Int](<3 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.754] Confluent - txn read Var(<4 @ 0,1,3,3>)
[20 Mar 2012, 18:22'36.754] Confluent - Var(<4 @ 0,1,3,3>) get
[20 Mar 2012, 18:22'36.754] Confluent - txn get' <4 @ 0,1,3,3>
[20 Mar 2012, 18:22'36.755] Confluent - txn readID <5 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.755] Confluent - txn read Var[Int](<6 @ 0,2,3,3>)
[20 Mar 2012, 18:22'36.755] Confluent - txn read Var(<7 @ 0,2,3,3>)
[20 Mar 2012, 18:22'36.755] Confluent - Var(<7 @ 0,2,3,3>) get
[20 Mar 2012, 18:22'36.755] Confluent - txn get' <7 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.756] Confluent - txn readID <8 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.757] Confluent - txn read Var[Int](<9 @ 0,2,3,3>)
[20 Mar 2012, 18:22'36.757] Confluent - txn read Var(<10 @ 0,2,3,3>)
[20 Mar 2012, 18:22'36.757] Confluent - Var(<10 @ 0,2,3,3>) get
[20 Mar 2012, 18:22'36.757] Confluent - txn get' <10 @ 0,2,3,3>
[20 Mar 2012, 18:22'36.757] Confluent - Var(<10 @ 0,2,3,3>) set Some(Node(w1, <5 @ 0,2>))
[20 Mar 2012, 18:22'36.757] Confluent - ....... txn dirty .......
[20 Mar 2012, 18:22'36.763] Confluent - ::::::: txn flush - term = 4 :::::::
[20 Mar 2012, 18:22'36.763] Confluent - txn flush write [B@68acfc3 for <10 @ 0, 2, 3, 4>

:::::::::::

- in a non-meld write the term is replaced
- in a meld write the new tree index is appended twice

consider
[20 Mar 2012, 18:22'36.443] Confluent - txn flush write [B@3da1c42f for <1 @ 0, 1>	-> Some(Node(w1, <5 @ 0,N>))

the ByteArraySerializer is invoked _without_ the transaction (?), and more importantly _before_ the commit,
thus it is unclear at that stage whether the transaction will add a new tree or not

and therefore, the correct write must be

[20 Mar 2012, 18:22'36.443] Confluent - txn flush write [B@3da1c42f for <1 @ 0, 1>	-> N -> Some(Node(w1, <5 @ 0,0>))

where 'N' is information inserted by persistent.put, while the peer serializer needs to pessimistically write the full accessed path 0,0

:::::::::::

Isn't the M / N mark implicit included in the write path? Any path where the term and index version are the same must come from a new tree, or not?
That is, a value found under such an entry is either newly created in that version (stored path is empty), or was imported from a previous tree (path is non-empty). Therefore, it suffices (again) to store the term (as was done before with `term2`).

:::::::::::

There is another issue now:
Imagine the sequence: v0 : allocate w0, x = 0
v0 -> v1: set x = 1
v0 -> v2: set x = 2
v0 -> v1 -> v3: concat with v0 -> v2 (new tree v3)
v3 -> v4 : set x = 3

this would yield to a single entry put at <v0, v1, v3, v4>. a read at <v0, v1, v3, v3> would find index <v0, v1, v3> and read the value of v4, although it should find the last assignment before, which is the one from v1 (x = 1).

therefore, in the case of no existing entry for the write index in persistent.put -- we must first check if this corresponds to the root version or not. If it is the root version, use single entry, otherwise, read previous value and create a two entry map straight away.

Where root version means (_!_) not necessarily that the terminal version corresponds to a tree, bu rather that indexTerm == term (therefore covering the case that the node was created in the same transaction as the write, allowing us to treat the stored value as a quasi-root value)
